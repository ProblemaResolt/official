{
  "content": "<p>この記事では、BlogPost.jsxとBlogList.jsxの具体的な実装方法について解説します。</p>\n<h2>1. BlogList.jsxの主要機能実装</h2>\n<h3>記事一覧の取得と状態管理</h3>\n<pre><code class=\"language-javascript\">const [articles, setArticles] = useState([]);\nconst [categories, setCategories] = useState([]);\nconst [tags, setTags] = useState([]);\nconst [archives, setArchives] = useState([]);\n</code></pre>\n<h3>フィルタリング処理</h3>\n<pre><code class=\"language-javascript\">const filteredArticles = articles.filter(article =&gt; {\n  if (filterTag) return article.tags.includes(filterTag);\n  if (filterCategory) return article.category === filterCategory;\n  if (filterDate) {\n    const articleDate = new Date(article.date);\n    const [year, month] = filterDate.split('-');\n    return articleDate.getFullYear() === parseInt(year) &amp;&amp; \n           articleDate.getMonth() + 1 === parseInt(month);\n  }\n  return true; \n});\n</code></pre>\n<h3>アーカイブ生成処理</h3>\n<pre><code class=\"language-javascript\">const archiveList = [...new Set(data.map(article =&gt; {\n  const date = new Date(article.date);\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n}))].sort().reverse();\n</code></pre>\n<h3>記事データの取得と結合</h3>\n<pre><code class=\"language-javascript\">const fetchArticle = async () =&gt; {\n  try {\n    // メタデータの取得\n    const metaResponse = await fetch(`${baseUrl}/data/blog-posts.json`);\n    const metaData = await metaResponse.json();\n    const foundArticle = metaData.find(article =&gt; article.id === id);\n\n    // コンテンツの取得\n    const contentResponse = await fetch(`${baseUrl}/data/contents/${id}.json`);\n    const contentData = await contentResponse.json();\n\n    // 記事データの結合\n    setArticle({\n      ...foundArticle,\n      content: contentData.content\n    });\n  } catch (error) {\n    console.error('記事の取得に失敗:', error);\n  }\n};\n</code></pre>\n<h3>3. データ構造の設計</h3>\n<h4>記事メタデータ（blog-posts.json）</h4>\n<pre><code class=\"language-json\">{\n  &quot;id&quot;: &quot;post-id&quot;,\n  &quot;date&quot;: &quot;2025-05-13&quot;,\n  &quot;tags&quot;: [&quot;React&quot;, &quot;GitHub Pages&quot;],\n  &quot;category&quot;: &quot;開発&quot;,\n  &quot;title&quot;: &quot;記事タイトル&quot;,\n  &quot;summary&quot;: &quot;記事の要約&quot;,\n  &quot;contentPath&quot;: &quot;contents/post-id.json&quot;\n}\n</code></pre>\n<h4>記事コンテンツ（contents/[id].json）</h4>\n<pre><code class=\"language-json\">{\n  &quot;content&quot;: &quot;&lt;h2&gt;記事タイトル&lt;/h2&gt;&lt;p&gt;記事の本文...&lt;/p&gt;&quot;\n}\n</code></pre>\n<h3>4. 実装のポイント</h3>\n<ul>\n<li>メタデータとコンテンツの分離による効率的なデータ管理</li>\n<li>静的ホスティングに適したJSON形式でのコンテンツ管理</li>\n<li>URLパラメータを使用したフィルタリング機能</li>\n<li>アーカイブ、カテゴリー、タグによる記事の整理</li>\n<li>React Routerを使用した効率的なルーティング</li>\n</ul>\n<h3>5. パフォーマンス最適化</h3>\n<ul>\n<li>メタデータの一括取得によるリクエスト数の削減</li>\n<li>必要な時のみコンテンツを取得する遅延ローディング</li>\n<li>URLパラメータによるフィルタリング状態の保持</li>\n<li>メモ化によるフィルタリング処理の最適化</li>\n</ul>\n<hr>\n<p>この実装方法により、GitHub Pagesの静的ホスティング環境でも動的なブログ機能を実現できます。JSONファイルによるコンテンツ管理は、CMSを使用せずともメンテナンスが容易で、かつGitHub上で直接編集も可能という利点があります。</p>\n"
}
