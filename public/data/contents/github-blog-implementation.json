{
  "content": "<h3>GitHub Pagesでブログ機能を実装する方法</h3>\n<p>この記事では、React + GitHub Pagesを使用してブログ機能を実装する方法を解説します。JSON形式でコンテンツを管理し、動的なブログシステムを構築する手法を紹介します。</p>\n<h3>1. ディレクトリ構造の設計</h3>\n<pre><code>public/\n  ├── data/\n  │   ├── blog-posts.json    # 記事のメタデータ\n  │   └── contents/          # 各記事のコンテンツ\n  │       ├── post1.json\n  │       └── post2.json\nsrc/\n  ├── pages/\n  │   ├── BlogList.jsx      # 記事一覧ページ\n  │   └── BlogPost.jsx      # 記事詳細ページ\n  └── components/\n      └── BlogItem.jsx      # 記事アイテムコンポーネント\n</code></pre>\n<h3>2. メタデータの管理</h3>\n<p>blog-posts.jsonでは、以下のような形式で記事のメタデータを管理します：</p>\n<pre><code class=\"language-json\">[\n  {\n    &quot;id&quot;: &quot;post-id&quot;,\n    &quot;date&quot;: &quot;2025-05-13&quot;,\n    &quot;tags&quot;: [&quot;React&quot;, &quot;GitHub Pages&quot;],\n    &quot;category&quot;: &quot;開発&quot;,\n    &quot;title&quot;: &quot;記事タイトル&quot;,\n    &quot;summary&quot;: &quot;記事の要約&quot;,\n    &quot;contentPath&quot;: &quot;contents/post-id.json&quot;\n  }\n]\n</code></pre>\n<h3>3. 記事一覧の実装</h3>\n<p>BlogList.jsxでは以下の機能を実装します：</p>\n<ul>\n<li>記事の一覧表示</li>\n<li>カテゴリーによるフィルタリング</li>\n<li>タグによるフィルタリング</li>\n<li>アーカイブ（日付）によるフィルタリング</li>\n</ul>\n<h3>4. 記事詳細の実装</h3>\n<p>BlogPost.jsxでは以下の機能を実装します：</p>\n<ul>\n<li>URLパラメータから記事IDを取得</li>\n<li>記事コンテンツの動的ロード</li>\n<li>関連記事の表示</li>\n<li>SNSシェアボタン</li>\n</ul>\n<h3>5. GitHub Pagesでの注意点</h3>\n<p>GitHub Pagesで実装する際の主な注意点：</p>\n<ul>\n<li>ベースURLの設定（/repositoryName/）</li>\n<li>404エラーのハンドリング</li>\n<li>静的ホスティングの制約</li>\n</ul>\n<h3>6. パフォーマンス最適化</h3>\n<p>以下の点に注意してパフォーマンスを最適化：</p>\n<ul>\n<li>記事データの遅延ロード</li>\n<li>画像の最適化</li>\n<li>キャッシュの活用</li>\n</ul>\n<hr>\n<h2>まとめ</h2>\n<p>GitHub PagesとReactを組み合わせることで、無料でブログ機能を実装できます。静的ホスティングの制約はありますが、工夫次第で十分実用的なブログシステムを構築できます。</p>\n"
}
