{
  "id": "skills-implementation",
    "content": "<h2>スキルページの実装解説</h2><p>Reactでスキルを視覚的に表現するページの実装方法を解説します。Intersection Observerを使用したアニメーションと、データの動的な読み込みを組み合わせています。</p><h3>1. 基本構造</h3><pre><code>const Skills = () => {\n  const [skills, setSkills] = useState(null);\n  const [error, setError] = useState(null);\n  // ...\n};</code></pre><p>スキルデータの状態管理には、useStateフックを使用しています。</p><h3>2. データの読み込み</h3><pre><code>useEffect(() => {\n  const baseUrl = process.env.NODE_ENV === \\\"production\\\" \n    ? \\\"/official\\\"\n    : \\\"\\\";\n    \n  fetch(`${baseUrl}/data/skills.json`)\n    .then(response => response.json())\n    .then(data => setSkills(data));\n}, []);</code></pre><p>環境に応じたベースURLを使用してJSONデータを読み込みます。</p><h3>3. スキルバーのアニメーション</h3><pre><code>useEffect(() => {\n  if (!skills) return;\n\n  const observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          const bar = entry.target;\n          const percentage = bar.getAttribute(\\\"data-percentage\\\");\n          bar.style.width = `${percentage}%`;\n        }\n      });\n    },\n    { threshold: 0.1 }\n  );\n}, [skills]);</code></pre><p>Intersection Observerを使用して、要素が画面に表示されたときにアニメーションを開始します。</p><h3>4. 経験年数の計算</h3><pre><code>const experience = skill.experience.match(/(\\d+)年|(\\d+)ヶ月/g);\nlet totalMonths = 0;\n\nif (experience) {\n  experience.forEach((exp) => {\n    if (exp.includes(\\\"年\\\")) {\n      totalMonths += parseInt(exp) * 12;\n    } else if (exp.includes(\\\"ヶ月\\\")) {\n      totalMonths += parseInt(exp);\n    }\n  });\n}</code></pre><p>正規表現を使用して経験年数を月数に変換し、スキルバーの長さを計算します。</p><h3>5. カテゴリー別の表示</h3><pre><code>&lt;div className=\\\"skill-categories\\\"&gt;\n  &lt;div className=\\\"skill-category\\\"&gt;\n    &lt;h3&gt;OS&lt;/h3&gt;\n    {renderSkillBars(skills.os)}\n  &lt;/div&gt;\n  // その他のカテゴリー\n&lt;/div&gt;</code></pre><p>スキルをカテゴリー別に整理して表示します。</p><h3>6. パフォーマンスの最適化</h3><ul><li>Intersection Observerの適切な閾値設定</li><li>アニメーション実行タイミングの調整</li><li>コンポーネントのクリーンアップ処理</li></ul><h3>7. アクセシビリティ</h3><ul><li>適切なHTML構造</li><li>セマンティックなマークアップ</li><li>キーボード操作への対応</li></ul><p>このように、視覚的な表現とパフォーマンス、アクセシビリティを両立させた実装を行っています。</p>"
}
