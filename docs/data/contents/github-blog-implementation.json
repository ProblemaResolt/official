{
  "content": "<h2>GitHub Pagesでブログ機能を実装する方法</h2><p>この記事では、React + GitHub Pagesを使用してブログ機能を実装する方法を解説します。JSON形式でコンテンツを管理し、動的なブログシステムを構築する手法を紹介します。</p><h3>1. ディレクトリ構造の設計</h3><pre><code>public/\n  ├── data/\n  │   ├── blog-posts.json    # 記事のメタデータ\n  │   └── contents/          # 各記事のコンテンツ\n  │       ├── post1.json\n  │       └── post2.json\nsrc/\n  ├── pages/\n  │   ├── BlogList.jsx      # 記事一覧ページ\n  │   └── BlogPost.jsx      # 記事詳細ページ\n  └── components/\n      └── BlogItem.jsx      # 記事アイテムコンポーネント</code></pre><h3>2. メタデータの管理</h3><p>blog-posts.jsonでは、以下のような形式で記事のメタデータを管理します：</p><pre><code>[\n  {\n    \"id\": \"post-id\",\n    \"date\": \"2025-05-13\",\n    \"tags\": [\"React\", \"GitHub Pages\"],\n    \"category\": \"開発\",\n    \"title\": \"記事タイトル\",\n    \"summary\": \"記事の要約\",\n    \"contentPath\": \"contents/post-id.json\"\n  }\n]</code></pre><h3>3. 記事一覧の実装</h3><p>BlogList.jsxでは以下の機能を実装します：</p><ul><li>記事の一覧表示</li><li>カテゴリーによるフィルタリング</li><li>タグによるフィルタリング</li><li>アーカイブ（日付）によるフィルタリング</li></ul><h3>4. 記事詳細の実装</h3><p>BlogPost.jsxでは以下の機能を実装します：</p><ul><li>URLパラメータから記事IDを取得</li><li>記事コンテンツの動的ロード</li><li>関連記事の表示</li><li>SNSシェアボタン</li></ul><h3>5. GitHub Pagesでの注意点</h3><p>GitHub Pagesで実装する際の主な注意点：</p><ul><li>ベースURLの設定（/repositoryName/）</li><li>404エラーのハンドリング</li><li>静的ホスティングの制約</li></ul><h3>6. パフォーマンス最適化</h3><p>以下の点に注意してパフォーマンスを最適化：</p><ul><li>記事データの遅延ロード</li><li>画像の最適化</li><li>キャッシュの活用</li></ul><h3>まとめ</h3><p>GitHub PagesとReactを組み合わせることで、無料でブログ機能を実装できます。静的ホスティングの制約はありますが、工夫次第で十分実用的なブログシステムを構築できます。</p>"
}
