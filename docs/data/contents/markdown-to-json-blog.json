{
  "content": "<h2>概要</h2>\n<p>Markdownで記事を書き、ビルド時に自動でHTML化・JSON化してReactで表示する静的ブログ構築手法を解説します。</p>\n<hr>\n<h2>1. 必要なライブラリのインストール</h2>\n<pre><code class=\"language-bash\">npm install gray-matter markdown-it\n</code></pre>\n<hr>\n<h2>2. Markdown記事を書く</h2>\n<p><code>src/content/posts/</code> ディレクトリにMarkdownファイルを作成します。</p>\n<pre><code class=\"language-markdown\">---\ntitle: React+ViteでMarkdownブログを自動HTML化して公開する方法\ndate: 2025-06-01\ntags: [React, Vite, Markdown, 静的サイト, ブログ]\ncategory: 開発\nsummary: Markdownで記事を書き、ビルド時に自動でHTML化・JSON化してReactで表示する静的ブログ構築手法を解説します。\n---\n\n# React+ViteでMarkdownブログを自動HTML化して公開する方法\n\n（ここに本文をMarkdownで記述）\n</code></pre>\n<hr>\n<h2>3. Markdown→HTML(JSON)変換スクリプト</h2>\n<p><code>scripts/md-to-json.js</code> を作成します。</p>\n<pre><code class=\"language-javascript\">import { readFileSync, writeFileSync, readdirSync, existsSync, mkdirSync } from 'fs';\nimport { join, basename } from 'path';\nimport matter from 'gray-matter';\nimport MarkdownIt from 'markdown-it';\n\nconst md = new MarkdownIt();\nconst POSTS_DIR = join(__dirname, '../src/content/posts');\nconst CONTENTS_DIR = join(__dirname, '../public/data/contents');\nconst BLOGPOSTS_PATH = join(__dirname, '../public/data/blog-posts.json');\n\nif (!existsSync(CONTENTS_DIR)) mkdirSync(CONTENTS_DIR, { recursive: true });\n\nconst blogPosts = [];\n\nreaddirSync(POSTS_DIR).forEach(filename =&gt; {\n  if (filename.endsWith('.md')) {\n    const filePath = join(POSTS_DIR, filename);\n    const { data, content } = matter(readFileSync(filePath, 'utf8'));\n    const id = basename(filename, '.md');\n    const htmlContent = md.render(content);\n\n    // 記事本文を書き出し\n    writeFileSync(\n      join(CONTENTS_DIR, `${id}.json`),\n      JSON.stringify({ content: htmlContent }, null, 2)\n    );\n\n    // メタデータを配列に追加\n    blogPosts.push({\n      id,\n      date: data.date,\n      tags: data.tags || [],\n      category: data.category,\n      title: data.title,\n      summary: data.summary,\n      contentPath: `contents/${id}.json`,\n      ogImage: data.ogImage || '',\n      description: data.description || data.summary || ''\n    });\n  }\n});\n\n// 記事一覧を書き出し\nwriteFileSync(\n  BLOGPOSTS_PATH,\n  JSON.stringify(blogPosts, null, 2)\n);\n</code></pre>\n<hr>\n<h2>4. package.jsonのスクリプト設定</h2>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;build:content&quot;: &quot;node scripts/md-to-json.cjs&quot;,\n  &quot;build&quot;: &quot;npm run build:content &amp;&amp; vite build&quot;\n}\n</code></pre>\n<hr>\n<h2>5. ReactでHTMLを表示</h2>\n<p>BlogPost.jsxなどで、生成されたJSONの<code>content</code>を <code>dangerouslySetInnerHTML</code> で表示します。</p>\n<pre><code class=\"language-javascript\">&lt;div className=&quot;blog-post-content&quot; dangerouslySetInnerHTML={{ __html: article.content }} /&gt;\n</code></pre>\n<hr>\n<h2>まとめ</h2>\n<ul>\n<li>Markdownで記事を書けるので執筆・管理が楽</li>\n<li>ビルド時にHTML化・JSON化するので高速・安全</li>\n<li>React/Viteの静的サイトでも柔軟にブログ運用できる</li>\n</ul>\n<p>この仕組みで、エンジニア向けの静的ブログを効率よく構築できます！</p>\n"
}