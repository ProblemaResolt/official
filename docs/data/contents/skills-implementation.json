{
  "content": "<p>Reactでスキルを視覚的に表現するページの実装方法を解説します。Intersection Observerを使用したアニメーションと、データの動的な読み込みを組み合わせています。</p>\n<h3>1. 基本構造</h3>\n<pre><code class=\"language-javascript\">const Skills = () =&gt; {\n  const [skills, setSkills] = useState(null);\n  const [error, setError] = useState(null);\n  // ...\n};\n</code></pre>\n<p>スキルデータの状態管理には、useStateフックを使用しています。</p>\n<h3>2. データの読み込み</h3>\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\n  const baseUrl = process.env.NODE_ENV === &quot;production&quot; \n    ? &quot;/official&quot;\n    : &quot;&quot;;\n    \n  fetch(`${baseUrl}/data/skills.json`)\n    .then(response =&gt; response.json())\n    .then(data =&gt; setSkills(data));\n}, []);\n</code></pre>\n<p>環境に応じたベースURLを使用してJSONデータを読み込みます。</p>\n<h3>3. スキルバーのアニメーション</h3>\n<pre><code class=\"language-javascript\">useEffect(() =&gt; {\n  if (!skills) return;\n\n  const observer = new IntersectionObserver(\n    (entries) =&gt; {\n      entries.forEach((entry) =&gt; {\n        if (entry.isIntersecting) {\n          const bar = entry.target;\n          const percentage = bar.getAttribute(&quot;data-percentage&quot;);\n          bar.style.width = `${percentage}%`;\n        }\n      });\n    },\n    { threshold: 0.1 }\n  );\n}, [skills]);\n</code></pre>\n<p>Intersection Observerを使用して、要素が画面に表示されたときにアニメーションを開始します。</p>\n<h3>4. 経験年数の計算</h3>\n<pre><code class=\"language-javascript\">const experience = skill.experience.match(/(\\d+)年|(\\d+)ヶ月/g);\nlet totalMonths = 0;\n\nif (experience) {\n  experience.forEach((exp) =&gt; {\n    if (exp.includes(&quot;年&quot;)) {\n      totalMonths += parseInt(exp) * 12;\n    } else if (exp.includes(&quot;ヶ月&quot;)) {\n      totalMonths += parseInt(exp);\n    }\n  });\n}\n</code></pre>\n<p>正規表現を使用して経験年数を月数に変換し、スキルバーの長さを計算します。</p>\n<h3>5. カテゴリー別の表示</h3>\n<pre><code class=\"language-jsx\">&lt;div className=&quot;skill-categories&quot;&gt;\n  &lt;div className=&quot;skill-category&quot;&gt;\n    &lt;h3&gt;OS&lt;/h3&gt;\n    {renderSkillBars(skills.os)}\n  &lt;/div&gt;\n  {/* その他のカテゴリー */}\n&lt;/div&gt;\n</code></pre>\n<p>スキルをカテゴリー別に整理して表示します。</p>\n<h3>6. パフォーマンスの最適化</h3>\n<ul>\n<li>Intersection Observerの適切な閾値設定</li>\n<li>アニメーション実行タイミングの調整</li>\n<li>コンポーネントのクリーンアップ処理</li>\n</ul>\n<h3>7. アクセシビリティ</h3>\n<ul>\n<li>適切なHTML構造</li>\n<li>セマンティックなマークアップ</li>\n<li>キーボード操作への対応</li>\n</ul>\n<p>このように、視覚的な表現とパフォーマンス、アクセシビリティを両立させた実装を行っています。</p>\n"
}
